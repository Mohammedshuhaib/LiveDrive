/*!
 * jquery-timepicker v1.11.11 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2017 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */

!(function (a) {
  typeof exports === 'object'
  && exports
  && typeof module === 'object'
  && module
  && module.exports === exports
    ? a(require('jquery'))
    : typeof define === 'function' && define.amd
      ? define(['jquery'], a)
      : a(jQuery);
}((a) => {
  function b(a) {
    const b = a[0];
    return b.offsetWidth > 0 && b.offsetHeight > 0;
  }
  function c(b) {
    if (
      (b.minTime && (b.minTime = t(b.minTime)),
      b.maxTime && (b.maxTime = t(b.maxTime)),
      b.durationTime
        && typeof b.durationTime !== 'function'
        && (b.durationTime = t(b.durationTime)),
      b.scrollDefault == 'now')
    ) {
      b.scrollDefault = function () {
        return b.roundingFunction(t(new Date()), b);
      };
    } else if (b.scrollDefault && typeof b.scrollDefault !== 'function') {
      const c = b.scrollDefault;
      b.scrollDefault = function () {
        return b.roundingFunction(t(c), b);
      };
    } else {
      b.minTime
        && (b.scrollDefault = function () {
          return b.roundingFunction(b.minTime, b);
        });
    }
    if (
      (a.type(b.timeFormat) === 'string'
        && b.timeFormat.match(/[gh]/)
        && (b._twelveHourTime = !0),
      b.showOnFocus === !1
        && b.showOn.indexOf('focus') != -1
        && b.showOn.splice(b.showOn.indexOf('focus'), 1),
      b.disableTimeRanges.length > 0)
    ) {
      for (var d in b.disableTimeRanges) {
        b.disableTimeRanges[d] = [          t(b.disableTimeRanges[d][0]),
          t(b.disableTimeRanges[d][1]),
        ];
      }
      b.disableTimeRanges = b.disableTimeRanges.sort((a, b) => a[0] - b[0]);
      for (var d = b.disableTimeRanges.length - 1; d > 0; d--) {
        b.disableTimeRanges[d][0] <= b.disableTimeRanges[d - 1][1]
          && ((b.disableTimeRanges[d - 1] = [
            Math.min(b.disableTimeRanges[d][0], b.disableTimeRanges[d - 1][0]),
            Math.max(b.disableTimeRanges[d][1], b.disableTimeRanges[d - 1][1]),
          ]),
          b.disableTimeRanges.splice(d, 1));
      }
    }
    return b;
  }
  function d(b) {
    const c = b.data('timepicker-settings');
    let d = b.data('timepicker-list');
    if (
      (d && d.length && (d.remove(), b.data('timepicker-list', !1)),
      c.useSelect)
    ) {
      d = a('<select />', { class: 'ui-timepicker-select' });
      var g = d;
    } else {
      d = a('<ul />', { class: 'ui-timepicker-list' });
      var g = a('<div />', { class: 'ui-timepicker-wrapper', tabindex: -1 });
      g.css({ display: 'none', position: 'absolute' }).append(d);
    }
    if (c.noneOption) {
      if (
        (c.noneOption === !0
          && (c.noneOption = c.useSelect ? 'Time...' : 'None'),
        a.isArray(c.noneOption))
      ) {
        for (var i in c.noneOption) {
          if (parseInt(i, 10) == i) {
            var k = e(c.noneOption[i], c.useSelect);
            d.append(k);
          }
        }
      } else {
        var k = e(c.noneOption, c.useSelect);
        d.append(k);
      }
    }
    if (
      (c.className && g.addClass(c.className),
      (c.minTime !== null || c.durationTime !== null) && c.showDuration)
    ) {
      typeof c.step === 'function' ? 'function' : c.step;
      g.addClass('ui-timepicker-with-duration'),
      g.addClass(`ui-timepicker-step-${c.step}`);
    }
    let l = c.minTime;
    typeof c.durationTime === 'function'
      ? (l = t(c.durationTime()))
      : c.durationTime !== null && (l = c.durationTime);
    const n = c.minTime !== null ? c.minTime : 0;
    let o = c.maxTime !== null ? c.maxTime : n + v - 1;
    n > o && (o += v),
    o === v - 1 && a.type(c.timeFormat) === 'string' && c.show2400 && (o = v);
    const p = c.disableTimeRanges;
    let w = 0;
    const x = p.length;
    let z = c.step;
    typeof z !== 'function'
      && (z = function () {
        return c.step;
      });
    for (var i = n, A = 0; o >= i; A++, i += 60 * z(A)) {
      const B = i;
      const C = s(B, c);
      if (c.useSelect) {
        var D = a('<option />', { value: C });
        D.text(C);
      } else {
        var D = a('<li />');
        D.addClass(v / 2 > B % v ? 'ui-timepicker-am' : 'ui-timepicker-pm'),
        D.data('time', u(B, c)),
        D.text(C);
      }
      if ((c.minTime !== null || c.durationTime !== null) && c.showDuration) {
        const E = r(i - l, c.step);
        if (c.useSelect) D.text(`${D.text()} (${E})`);
        else {
          const F = a('<span />', { class: 'ui-timepicker-duration' });
          F.text(` (${E})`), D.append(F);
        }
      }
      x > w
        && (B >= p[w][1] && (w += 1),
        p[w]
          && B >= p[w][0]
          && B < p[w][1]
          && (c.useSelect
            ? D.prop('disabled', !0)
            : D.addClass('ui-timepicker-disabled'))),
      d.append(D);
    }
    if (
      (g.data('timepicker-input', b), b.data('timepicker-list', g), c.useSelect)
    ) {
      b.val() && d.val(f(t(b.val()), c)),
      d.on('focus', function () {
        a(this).data('timepicker-input').trigger('showTimepicker');
      }),
      d.on('blur', function () {
        a(this).data('timepicker-input').trigger('hideTimepicker');
      }),
      d.on('change', function () {
        m(b, a(this).val(), 'select');
      }),
      m(b, d.val(), 'initial'),
      b.hide().after(d);
    } else {
      let G = c.appendTo;
      typeof G === 'string' ? (G = a(G)) : typeof G === 'function' && (G = G(b)),
      G.append(g),
      j(b, d),
      d.on('mousedown click', 'li', function (c) {
        b.off('focus.timepicker'),
        b.on('focus.timepicker-ie-hack', () => {
          b.off('focus.timepicker-ie-hack'),
          b.on('focus.timepicker', y.show);
        }),
        h(b) || b[0].focus(),
        d.find('li').removeClass('ui-timepicker-selected'),
        a(this).addClass('ui-timepicker-selected'),
        q(b)
              && (b.trigger('hideTimepicker'),
              d.on('mouseup.timepicker click.timepicker', 'li', (a) => {
                d.off('mouseup.timepicker click.timepicker'), g.hide();
              }));
      });
    }
  }
  function e(b, c) {
    let d; let e; let
      f;
    return (
      typeof b === 'object'
        ? ((d = b.label), (e = b.className), (f = b.value))
        : typeof b === 'string'
          ? (d = b)
          : a.error('Invalid noneOption value'),
      c
        ? a('<option />', { value: f, class: e, text: d })
        : a('<li />', { class: e, text: d }).data('time', String(f))
    );
  }
  function f(a, b) {
    return (a = b.roundingFunction(a, b)), a !== null ? s(a, b) : void 0;
  }
  function g(b) {
    if (b.target != window) {
      const c = a(b.target);
      c.closest('.ui-timepicker-input').length
        || c.closest('.ui-timepicker-wrapper').length
        || (y.hide(),
        a(document).unbind('.ui-timepicker'),
        a(window).unbind('.ui-timepicker'));
    }
  }
  function h(a) {
    const b = a.data('timepicker-settings');
    return (
      (window.navigator.msMaxTouchPoints || 'ontouchstart' in document)
      && b.disableTouchKeyboard
    );
  }
  function i(b, c, d) {
    if (!d && d !== 0) return !1;
    const e = b.data('timepicker-settings');
    let f = !1;
    var d = e.roundingFunction(d, e);
    return (
      c.find('li').each((b, c) => {
        const e = a(c);
        if (typeof e.data('time') === 'number') return e.data('time') == d ? ((f = e), !1) : void 0;
      }),
      f
    );
  }
  function j(a, b) {
    b.find('li').removeClass('ui-timepicker-selected');
    const c = a.data('timepicker-settings');
    const d = t(l(a), c);
    if (d !== null) {
      const e = i(a, b, d);
      if (e) {
        const f = e.offset().top - b.offset().top;
        (f + e.outerHeight() > b.outerHeight() || f < 0)
          && b.scrollTop(b.scrollTop() + e.position().top - e.outerHeight()),
        (c.forceRoundTime || e.data('time') === d)
            && e.addClass('ui-timepicker-selected');
      }
    }
  }
  function k(b, c) {
    if (c != 'timepicker') {
      const d = a(this);
      if (this.value === '') return void m(d, null, c);
      if (!d.is(':focus') || (b && b.type == 'change')) {
        const e = d.data('timepicker-settings');
        let f = t(this.value, e);
        if (f === null) return void d.trigger('timeFormatError');
        let g = !1;
        if (
          (e.minTime !== null
            && e.maxTime !== null
            && (f < e.minTime || f > e.maxTime)
            && (g = !0),
          a.each(e.disableTimeRanges, function () {
            return f >= this[0] && f < this[1] ? ((g = !0), !1) : void 0;
          }),
          e.forceRoundTime)
        ) {
          const h = e.roundingFunction(f, e);
          h != f && ((f = h), (c = null));
        }
        const i = s(f, e);
        g
          ? (m(d, i, 'error') || (b && b.type == 'change'))
            && d.trigger('timeRangeError')
          : m(d, i, c);
      }
    }
  }
  function l(a) {
    return a.is('input') ? a.val() : a.data('ui-timepicker-value');
  }
  function m(a, b, c) {
    if (a.is('input')) {
      a.val(b);
      const d = a.data('timepicker-settings');
      d.useSelect
        && c != 'select'
        && c != 'initial'
        && a.data('timepicker-list').val(f(t(b), d));
    }
    return a.data('ui-timepicker-value') != b
      ? (a.data('ui-timepicker-value', b),
      c == 'select'
        ? a
          .trigger('selectTime')
          .trigger('changeTime')
          .trigger('change', 'timepicker')
        : ['error', 'initial'].indexOf(c) == -1 && a.trigger('changeTime'),
      !0)
      : (a.trigger('selectTime'), !1);
  }
  function n(a) {
    switch (a.keyCode) {
      case 13:
      case 9:
        return;
      default:
        a.preventDefault();
    }
  }
  function o(c) {
    const d = a(this);
    let e = d.data('timepicker-list');
    if (!e || !b(e)) {
      if (c.keyCode != 40) return !0;
      y.show.call(d.get(0)), (e = d.data('timepicker-list')), h(d) || d.focus();
    }
    switch (c.keyCode) {
      case 13:
        return (
          q(d) && (k.call(d.get(0), { type: 'change' }), y.hide.apply(this)),
          c.preventDefault(),
          !1
        );
      case 38:
        var f = e.find('.ui-timepicker-selected');
        return (
          f.length
            ? f.is(':first-child')
              || (f.removeClass('ui-timepicker-selected'),
              f.prev().addClass('ui-timepicker-selected'),
              f.prev().position().top < f.outerHeight()
                && e.scrollTop(e.scrollTop() - f.outerHeight()))
            : (e.find('li').each((b, c) => (a(c).position().top > 0 ? ((f = a(c)), !1) : void 0)),
            f.addClass('ui-timepicker-selected')),
          !1
        );
      case 40:
        return (
          (f = e.find('.ui-timepicker-selected')),
          f.length === 0
            ? (e.find('li').each((b, c) => (a(c).position().top > 0 ? ((f = a(c)), !1) : void 0)),
            f.addClass('ui-timepicker-selected'))
            : f.is(':last-child')
              || (f.removeClass('ui-timepicker-selected'),
              f.next().addClass('ui-timepicker-selected'),
              f.next().position().top + 2 * f.outerHeight() > e.outerHeight()
                && e.scrollTop(e.scrollTop() + f.outerHeight())),
          !1
        );
      case 27:
        e.find('li').removeClass('ui-timepicker-selected'), y.hide();
        break;
      case 9:
        y.hide();
        break;
      default:
        return !0;
    }
  }
  function p(c) {
    const d = a(this);
    const e = d.data('timepicker-list');
    const f = d.data('timepicker-settings');
    if (!e || !b(e) || f.disableTextInput) return !0;
    if (c.type === 'paste' || c.type === 'cut') {
      return void setTimeout(() => {
        f.typeaheadHighlight ? j(d, e) : e.hide();
      }, 0);
    }
    switch (c.keyCode) {
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 65:
      case 77:
      case 80:
      case 186:
      case 8:
      case 46:
        f.typeaheadHighlight ? j(d, e) : e.hide();
    }
  }
  function q(a) {
    const b = a.data('timepicker-settings');
    const c = a.data('timepicker-list');
    let d = null;
    const e = c.find('.ui-timepicker-selected');
    return e.hasClass('ui-timepicker-disabled')
      ? !1
      : (e.length && (d = e.data('time')),
      d !== null
          && (typeof d !== 'string' && (d = s(d, b)), m(a, d, 'select')),
      !0);
  }
  function r(a, b) {
    a = Math.abs(a);
    let c;
    let d;
    const e = Math.round(a / 60);
    let f = [];
    return (
      e < 60
        ? (f = [e, w.mins])
        : ((c = Math.floor(e / 60)),
        (d = e % 60),
        b == 30 && d == 30 && (c += w.decimal + 5),
        f.push(c),
        f.push(c == 1 ? w.hr : w.hrs),
        b != 30 && d && (f.push(d), f.push(w.mins))),
      f.join(' ')
    );
  }
  function s(b, c) {
    if (typeof b !== 'number') return null;
    let d = parseInt(b % 60);
    var e = parseInt((b / 60) % 60);
    const f = parseInt((b / 3600) % 24);
    const g = new Date(1970, 0, 2, f, e, d, 0);
    if (isNaN(g.getTime())) return null;
    if (a.type(c.timeFormat) === 'function') return c.timeFormat(g);
    for (var h, i, j = '', k = 0; k < c.timeFormat.length; k++) {
      switch ((i = c.timeFormat.charAt(k))) {
        case 'a':
          j += g.getHours() > 11 ? w.pm : w.am;
          break;
        case 'A':
          j += g.getHours() > 11 ? w.PM : w.AM;
          break;
        case 'g':
          (h = g.getHours() % 12), (j += h === 0 ? '12' : h);
          break;
        case 'G':
          (h = g.getHours()), b === v && (h = c.show2400 ? 24 : 0), (j += h);
          break;
        case 'h':
          (h = g.getHours() % 12),
          h !== 0 && h < 10 && (h = `0${h}`),
          (j += h === 0 ? '12' : h);
          break;
        case 'H':
          (h = g.getHours()),
          b === v && (h = c.show2400 ? 24 : 0),
          (j += h > 9 ? h : `0${h}`);
          break;
        case 'i':
          var e = g.getMinutes();
          j += e > 9 ? e : `0${e}`;
          break;
        case 's':
          (d = g.getSeconds()), (j += d > 9 ? d : `0${d}`);
          break;
        case '\\':
          k++, (j += c.timeFormat.charAt(k));
          break;
        default:
          j += i;
      }
    }
    return j;
  }
  function t(a, b) {
    if (a === '' || a === null) return null;
    if (typeof a === 'object') return 3600 * a.getHours() + 60 * a.getMinutes() + a.getSeconds();
    if (typeof a !== 'string') return a;
    (a = a.toLowerCase().replace(/[\s\.]/g, '')),
    (a.slice(-1) == 'a' || a.slice(-1) == 'p') && (a += 'm');
    const c = `(${
      w.am.replace('.', '')
    }|${
      w.pm.replace('.', '')
    }|${
      w.AM.replace('.', '')
    }|${
      w.PM.replace('.', '')
    })?`;
    const d = new RegExp(
      `^${c}([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?${c}$`,
    );
    const e = a.match(d);
    if (!e) return null;
    const f = parseInt(1 * e[2], 10);
    const g = e[1] || e[5];
    let h = f;
    const i = 1 * e[3] || 0;
    const j = 1 * e[4] || 0;
    if (f <= 12 && g) {
      const k = g == w.pm || g == w.PM;
      h = f == 12 ? (k ? 12 : 0) : f + (k ? 12 : 0);
    } else if (b) {
      const l = 3600 * f + 60 * i + j;
      if (l >= v + (b.show2400 ? 1 : 0)) {
        if (b.wrapHours === !1) return null;
        h = f % 24;
      }
    }
    let m = 3600 * h + 60 * i + j;
    if (f < 12 && !g && b && b._twelveHourTime && b.scrollDefault) {
      const n = m - b.scrollDefault();
      n < 0 && n >= v / -2 && (m = (m + v / 2) % v);
    }
    return m;
  }
  function u(a, b) {
    return a == v && b.show2400 ? a : a % v;
  }
  var v = 86400;
  var w = {
    am: 'am',
    pm: 'pm',
    AM: 'AM',
    PM: 'PM',
    decimal: '.',
    mins: 'mins',
    hr: 'hr',
    hrs: 'hrs',
  };
  const x = {
    appendTo: 'body',
    className: null,
    closeOnWindowScroll: !1,
    disableTextInput: !1,
    disableTimeRanges: [],
    disableTouchKeyboard: !1,
    durationTime: null,
    forceRoundTime: !1,
    maxTime: null,
    minTime: null,
    noneOption: !1,
    orientation: 'l',
    roundingFunction(a, b) {
      if (a === null) return null;
      if (typeof b.step !== 'number') return a;
      let c = a % (60 * b.step);
      const d = b.minTime || 0;
      return (
        (c -= d % (60 * b.step)),
        c >= 30 * b.step ? (a += 60 * b.step - c) : (a -= c),
        u(a, b)
      );
    },
    scrollDefault: null,
    selectOnBlur: !1,
    show2400: !1,
    showDuration: !1,
    showOn: ['click', 'focus'],
    showOnFocus: !0,
    step: 30,
    stopScrollPropagation: !1,
    timeFormat: 'g:ia',
    typeaheadHighlight: !0,
    useSelect: !1,
    wrapHours: !0,
  };
  var y = {
    init(b) {
      return this.each(function () {
        const e = a(this);
        const f = [];
        for (const g in x) e.data(g) && (f[g] = e.data(g));
        let h = a.extend({}, x, b, f);
        if (
          (h.lang && (w = a.extend(w, h.lang)),
          (h = c(h)),
          e.data('timepicker-settings', h),
          e.addClass('ui-timepicker-input'),
          h.useSelect)
        ) d(e);
        else {
          if ((e.prop('autocomplete', 'off'), h.showOn)) for (const i in h.showOn) e.on(`${h.showOn[i]}.timepicker`, y.show);
          e.on('change.timepicker', k),
          e.on('keydown.timepicker', o),
          e.on('keyup.timepicker', p),
          h.disableTextInput && e.on('keydown.timepicker', n),
          e.on('cut.timepicker', p),
          e.on('paste.timepicker', p),
          k.call(e.get(0), null, 'initial');
        }
      });
    },
    show(c) {
      const e = a(this);
      const f = e.data('timepicker-settings');
      if ((c && c.preventDefault(), f.useSelect)) return void e.data('timepicker-list').focus();
      h(e) && e.blur();
      let k = e.data('timepicker-list');
      if (
        !e.prop('readonly')
          && ((k && k.length !== 0 && typeof f.durationTime !== 'function')
            || (d(e), (k = e.data('timepicker-list'))),
          !b(k))
      ) {
        e.data('ui-timepicker-value', e.val()), j(e, k), y.hide(), k.show();
        const m = {};
        f.orientation.match(/r/)
          ? (m.left = e.offset().left
                + e.outerWidth()
                - k.outerWidth()
                + parseInt(k.css('marginLeft').replace('px', ''), 10))
          : (m.left = e.offset().left
                + parseInt(k.css('marginLeft').replace('px', ''), 10));
        let n;
        (n = f.orientation.match(/t/)
          ? 't'
          : f.orientation.match(/b/)
            ? 'b'
            : e.offset().top + e.outerHeight(!0) + k.outerHeight()
              > a(window).height() + a(window).scrollTop()
              ? 't'
              : 'b'),
        n == 't'
          ? (k.addClass('ui-timepicker-positioned-top'),
          (m.top = e.offset().top
                  - k.outerHeight()
                  + parseInt(k.css('marginTop').replace('px', ''), 10)))
          : (k.removeClass('ui-timepicker-positioned-top'),
          (m.top = e.offset().top
                  + e.outerHeight()
                  + parseInt(k.css('marginTop').replace('px', ''), 10))),
        k.offset(m);
        let o = k.find('.ui-timepicker-selected');
        if (!o.length) {
          const p = t(l(e));
          p !== null
            ? (o = i(e, k, p))
            : f.scrollDefault && (o = i(e, k, f.scrollDefault()));
        }
        if (
          ((!o.length || o.hasClass('ui-timepicker-disabled'))
              && (o = k.find('li:not(.ui-timepicker-disabled):first')),
          o && o.length)
        ) {
          const q = k.scrollTop() + o.position().top - o.outerHeight();
          k.scrollTop(q);
        } else k.scrollTop(0);
        return (
          f.stopScrollPropagation
              && a(document).on(
                'wheel.ui-timepicker',
                '.ui-timepicker-wrapper',
                function (b) {
                  b.preventDefault();
                  const c = a(this).scrollTop();
                  a(this).scrollTop(c + b.originalEvent.deltaY);
                },
              ),
          a(document).on(
            'touchstart.ui-timepicker mousedown.ui-timepicker',
            g,
          ),
          a(window).on('resize.ui-timepicker', g),
          f.closeOnWindowScroll && a(document).on('scroll.ui-timepicker', g),
          e.trigger('showTimepicker'),
          this
        );
      }
    },
    hide(c) {
      const d = a(this);
      const e = d.data('timepicker-settings');
      return (
        e && e.useSelect && d.blur(),
        a('.ui-timepicker-wrapper').each(function () {
          const c = a(this);
          if (b(c)) {
            const d = c.data('timepicker-input');
            const e = d.data('timepicker-settings');
            e && e.selectOnBlur && q(d), c.hide(), d.trigger('hideTimepicker');
          }
        }),
        this
      );
    },
    option(b, e) {
      return typeof b === 'string' && typeof e === 'undefined'
        ? a(this).data('timepicker-settings')[b]
        : this.each(function () {
          const f = a(this);
          let g = f.data('timepicker-settings');
          const h = f.data('timepicker-list');
          typeof b === 'object'
            ? (g = a.extend(g, b))
            : typeof b === 'string' && (g[b] = e),
          (g = c(g)),
          f.data('timepicker-settings', g),
          k.call(f.get(0), { type: 'change' }, 'initial'),
          h && (h.remove(), f.data('timepicker-list', !1)),
          g.useSelect && d(f);
        });
    },
    getSecondsFromMidnight() {
      return t(l(this));
    },
    getTime(a) {
      const b = this;
      const c = l(b);
      if (!c) return null;
      const d = t(c);
      if (d === null) return null;
      a || (a = new Date());
      const e = new Date(a);
      return (
        e.setHours(d / 3600),
        e.setMinutes((d % 3600) / 60),
        e.setSeconds(d % 60),
        e.setMilliseconds(0),
        e
      );
    },
    isVisible() {
      const a = this;
      const c = a.data('timepicker-list');
      return !(!c || !b(c));
    },
    setTime(a) {
      const b = this;
      const c = b.data('timepicker-settings');
      if (c.forceRoundTime) var d = f(t(a), c);
      else var d = s(t(a), c);
      return (
        a && d === null && c.noneOption && (d = a),
        b.val(d),
        k.call(b.get(0), { type: 'change' }, 'initial'),
        b.data('timepicker-list') && j(b, b.data('timepicker-list')),
        this
      );
    },
    remove() {
      const a = this;
      if (a.hasClass('ui-timepicker-input')) {
        const b = a.data('timepicker-settings');
        return (
          a.removeAttr('autocomplete', 'off'),
          a.removeClass('ui-timepicker-input'),
          a.removeData('timepicker-settings'),
          a.off('.timepicker'),
          a.data('timepicker-list') && a.data('timepicker-list').remove(),
          b.useSelect && a.show(),
          a.removeData('timepicker-list'),
          this
        );
      }
    },
  };
  a.fn.timepicker = function (b) {
    return this.length
      ? y[b]
        ? this.hasClass('ui-timepicker-input')
          ? y[b].apply(this, Array.prototype.slice.call(arguments, 1))
          : this
        : typeof b !== 'object' && b
          ? void a.error(`Method ${b} does not exist on jQuery.timepicker`)
          : y.init.apply(this, arguments)
      : this;
  };
}));
